package ar.com.vault.hr.domain;

import java.time.LocalDate;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.validation.constraints.Digits;
import javax.validation.constraints.Max;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.annotations.GenericGenerator;
import org.springframework.beans.BeanUtils;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonManagedReference;

import lombok.Getter;
import lombok.Setter;

/**
 * It represents the employees in the company.
 * 
 * @author Gaston Napoli
 *
 */
@Entity
@Table(name = "EMPLOYEES")
@Setter
@Getter
public class Employee extends BaseEntity implements Comparable<Employee> {

    /**
     * Autogenerated 6-digit number ID. 
     */
    @Id
    @GeneratedValue(
            strategy = GenerationType.AUTO,
            generator="native"
    )
    @GenericGenerator(
            name = "native",
            strategy = "native"
    )
    @Column(name = "EMPLOYEE_ID", nullable = false, length = 6)
    @Max(999999)
    private Long id;
    
    @Column(name = "FIRST_NAME", length = 20)
    @Size(max = 20)
    private String firstName;
    
    @Column(name = "LAST_NAME", length = 25)
    @Size(max = 25)
    @NotNull
    private String lastName;
    
    @Column(name = "EMAIL", length = 25)
    @Size(max = 25)
    @NotNull
    private String email;
    
    @Column(name = "PHONE_NUMBER", length = 20)
    @Size(max = 20)
    private String phoneNumber;
    
    @Column(name = "HIRE_DATE")
    @NotNull
    @JsonFormat(pattern="yyyy-MM-dd")
    private LocalDate hireDate;

    @OneToOne
    @JoinColumn(name = "JOB_ID")
    @JsonIgnoreProperties({ "minimumSalary", "maximumSalary" })
    private Job job;
    
    @Column(name = "SALARY", precision = 8, scale = 2)
    @Digits(integer = 6, fraction = 2)
    private Double salary;
    
    @Column(name = "COMMISSION_PCT", precision = 2, scale = 2)
    @Digits(integer = 0, fraction = 2)
    private Double commissionPercentage;

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "MANAGER_ID")
    @JsonIgnoreProperties({ "department", "jobHistories", "manager" })
    private Employee manager;
    
    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "DEPARTMENT_ID")
    @JsonIgnoreProperties({ "manager" })
    private Department department;
    
    @OneToMany(mappedBy = "employee")
    @JsonManagedReference
    private Set<JobHistory> jobHistories;
    
    /**
     * It copies the basic attributes from the given employee to the current instance.
     * 
     * @param employee Source of values to be copied.
     */
    public void copyFrom(Employee employee) {
        BeanUtils.copyProperties(employee, this, "id", "job", "manager", "department", "jobHistories" );
    }

    @Override
    public int compareTo(Employee other) {
        // It defines sorting of Employees by hireDate.
        return hireDate.compareTo(other.getHireDate());
    }
    
}
